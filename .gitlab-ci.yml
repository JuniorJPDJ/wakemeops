workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

variables:
  WAKEMEBOT_IMAGE: "upciti/wakemebot:main"

stages:
  - update
  - build
  - test
  - push
  - publish
  - pages

# Templates
.default:
  image: $WAKEMEBOT_IMAGE
  tags: ["wakemebot"]

.schedule:
  extends: .default
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

.no_schedule:
  extends: .default
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - when: on_success

.parallel_repo:
  extends: .default
  parallel:
    matrix:
      - repo: devops
      - repo: secops
      - repo: terminal

.parallel_distro:
  extends: .default
  parallel:
    matrix:
      - DISTRO: ubuntu
        VERSION: ["16.04", "18.04", "20.04", "21.04"]
      - DISTRO: debian
        VERSION:
          ["bookworm-slim", "bullseye-slim", "buster-slim", "stretch-slim"]

# Anchors
.enable_ssh: &enable_ssh
  - eval $(ssh-agent -s)
  - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh || echo
  - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

.git_configure: &git_configure
  - git config --replace-all user.name $GITLAB_USER_NAME
  - git config --replace-all user.email $GITLAB_USER_EMAIL
  - git config push.default simple

.ops2deb_update: &ops2deb_update
  - for repo in $(ls ops2deb-* | cut -f2 -d "-" | cut -f1 -d "."); do OPS2DEB_OUTPUT_FILE=ops2deb-${repo}.log OPS2DEB_CONFIG="ops2deb-${repo}.yml" ops2deb update; done

.git_commit_push: &git_commit_push
  - git remote set-url --push origin git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git
  - branch="feature/update-packages-$(date '+%Y%m%d%H%M%S')"
  - git checkout -b ${branch}
  - git add ops2deb-*.yml
  - >
    echo -e "feature(bot): update packages\n" > message.log
  - cat ops2deb-*.log >> message.log || true
  - git commit -m "$(cat message.log)"
  - >
    git push \
      -o merge_request.create \
      -o merge_request.target=${CI_DEFAULT_BRANCH} \
      -o merge_request.merge_when_pipeline_succeeds \
      --set-upstream origin \
      ${branch}

.ops2deb_build: &ops2deb_build
  - mkdir -p ${OPS2DEB_WORK_DIR}
  - (curl -L ${CI_PAGES_URL}/repo-state-${repo}.json | jq || echo "[]") > repo-state-${repo}.json
  - wakemebot generate ops2deb-${repo}.yml repo-state-${repo}.json
  - if [ -z "$(ls -A $OPS2DEB_WORK_DIR)" ]; then exit 0; fi # if no changes
  - ops2deb build

.install_dependencies: &install_dependencies
  - apt update
  - apt-get install -y ${DEPENDENCIES}

.install_packages: &install_packages
  - curl https://gitlab.com/upciti/wakemeops/-/snippets/2189589/raw/main/install.sh | bash
  - export PACKAGE_PATH=$(find ./build -name "*.deb")
  - dpkg -i $PACKAGE_PATH || true
  - apt-get update -yq && apt-get install -fy

.aptly_push: &aptly_push
  - >
    wakemebot aptly push wakemeops-${repo} build/${repo}/*.deb \
      --server /host/data/aptly/aptly.sock

# Stages
update_packages:
  stage: update
  extends: .schedule
  before_script:
    - *enable_ssh
    - *git_configure
  script:
    - *ops2deb_update
    - git update-index -q --really-refresh
    - if git diff-index HEAD --quiet; then exit 0; fi # exit if no changes
    - *git_commit_push
  variables:
    GIT_STRATEGY: clone
    GITLAB_USER_NAME: "wakemebot"
    GITLAB_USER_EMAIL: "wakemebot@upciti.com"

generate_debs:
  stage: build
  extends:
    - .no_schedule
    - .parallel_repo
  script:
    - *ops2deb_build
  variables:
    OPS2DEB_WORK_DIR: "build/${repo}"
    OPS2DEB_CONFIG: "ops2deb-${repo}.yml"
  artifacts:
    paths:
      - build/**/*deb
    expire_in: 2 days

test_packages:
  stage: test
  image: ${DISTRO}:${VERSION}
  extends:
    - .no_schedule
    - .parallel_distro
  before_script:
    - *install_dependencies
    - *install_packages
  script:
    - >
      for package in $PACKAGE_PATH; do \
        n=$(dpkg --info $package | sed -n "s/ Package. \(.*\)/\1/p"); \
        dpkg -s $n || exit 77; \
      done
  variables:
    DEPENDENCIES: "curl gnupg2 ca-certificates"

push_packages:
  stage: push
  extends:
    - .no_schedule
    - .parallel_repo
  script:
    - if [ -z "$(ls -A build/${repo}/)" ]; then exit 0; fi # if no build
    - *aptly_push

publish_s3:
  stage: publish
  extends: .no_schedule
  script:
    - >
      curl -v -f -s -XPUT --unix-socket /host/data/aptly/aptly.sock \
        -H 'Content-Type: application/json' --data \
           "{\"ForceOverwrite\":true, \"Signing\" : \
            {\"GpgKey\":\"wakemebot-dev@upciti.com\", \"Batch\":true}}" \
        "http://_/api/publish/s3:wakemeops-eu-west-3:./stable"

update_pages:
  stage: pages
  extends: .no_schedule
  before_script:
    - mkdir public
  script:
    - >
      for repo in $(ls ops2deb-* | cut -f2 -d "-" | cut -f1 -d "."); do \
        wakemebot aptly export wakemeops-${repo} --server /host/data/aptly/aptly.sock \
        > ./public/repo-state-${repo}.json;\
      done
  artifacts:
    paths:
      - public
