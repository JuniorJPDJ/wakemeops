workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

stages:
  - image
  - build
  - deploy
  - test
  - update

.ops2deb_build: &ops2deb_build
  - ops2deb generate
  - ops2deb build

.ops2deb_update: &ops2deb_update
  - ops2deb update

.enable_ssh: &enable_ssh
  - eval $(ssh-agent -s)
  - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

.git_configure: &git_configure
  - git config --replace-all user.name $GITLAB_USER_NAME
  - git config --replace-all user.email $GITLAB_USER_EMAIL
  - git config push.default simple

.git_commit_push: &git_commit_push
  - git update-index -q --really-refresh
  - if git diff-index HEAD --quiet; then exit 0; fi # exit if no changes
  - git config --replace-all user.name ${GITLAB_USER_NAME}
  - git config --replace-all user.email ${GITLAB_USER_EMAIL}
  - git config push.default simple
  - git remote set-url --push origin git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git
  - branch="feature/update-packages-$(date '+%Y%m%d%H%M%S')"
  - git checkout -b ${branch}
  - git add ./ops2deb.yml
  - git commit -m "feature(bot) update packages"
  - git push -o merge_request.create -o merge_request.target=${CI_DEFAULT_BRANCH} -o merge_request.merge_when_pipeline_succeeds --set-upstream origin ${branch}

buildah:
  image: quay.io/buildah/stable:v1.23.0
  stage: image
  tags: ["docker"]
  before_script:
    - CURRENT_IMAGE_TAG="${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}"
    - CURRENT_IMAGE="${DOCKER_IMAGE}:${CURRENT_IMAGE_TAG}"
    - LATEST_IMAGE="${DOCKER_IMAGE}:latest"
  script:
    - buildah bud -f Dockerfile -t ${LATEST_IMAGE} -t ${CURRENT_IMAGE} .
    - buildah login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - buildah push --authfile /run/containers/0/auth.json ${CURRENT_IMAGE}
    - >
      if [ "${CI_COMMIT_BRANCH}" == "${CI_DEFAULT_BRANCH}" ]; then
        buildah push --authfile /run/containers/0/auth.json ${LATEST_IMAGE}
      fi
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE
    BUILD_BUILDAH: "False"
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
      changes:
        - Dockerfile
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $BUILD_BUILDAH == "True"'

.builder:
  image: $CI_REGISTRY_IMAGE:latest
  stage: build
  variables:
    OPS2DEB_WORK_DIR: build
  script:
    - *ops2deb_build

test_build:
  extends: .builder
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: "$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"

build:
  extends: .builder
  artifacts:
    paths:
      - build/*.deb
    expire_in: 2 days
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

test_package:
  stage: test
  image: ${DISTRO}:${VERSION}
  before_script:
    - export PACKAGE_PATH=$(find ./build -name "*.deb")
    - dpkg -i $PACKAGE_PATH || true
    - apt-get update -yq && apt-get install -fy
  script:
    - for p in $PACKAGE_PATH; do n=$(dpkg --info $p | sed -n "s/ Package. \(.*\)/\1/p"); dpkg -s $n || exit 77; done
  parallel:
    matrix:
      - DISTRO: ubuntu
        VERSION: ["16.04", "18.04", "20.04", "21.04"]
      - DISTRO: debian
        VERSION:
          ["bookworm-slim", "bullseye-slim", "buster-slim", "stretch-slim"]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

update:
  image: $CI_REGISTRY_IMAGE:latest
  stage: update
  before_script:
    - *enable_ssh
    - *git_configure
  script:
    - *ops2deb_update
    - *git_commit_push
  variables:
    GIT_STRATEGY: clone
    GITLAB_USER_NAME: "wakemebot"
    GITLAB_USER_EMAIL: "wakemebot@upciti.com"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
